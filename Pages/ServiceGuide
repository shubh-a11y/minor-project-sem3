import React, { useState, useEffect } from "react";
import { Link, useLocation } from "react-router-dom";
import { createPageUrl } from "../Components/utils/createPageUrl";
import { Service } from "../Components/utils/serviceApi";
import { 
  ArrowLeft,
  Clock,
  BarChart3,
  CheckCircle,
  ExternalLink,
  ChevronRight,
  Shield,
  FileText,
  CreditCard,
  GraduationCap,
  Heart,
  Briefcase,
  Users,
  Building,
  Calculator
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useLanguage } from '../components/contexts/LanguageContext';

const categoryIcons = {
  documents: FileText,
  identity: CreditCard,
  education: GraduationCap,
  health: Heart,
  employment: Briefcase,
  welfare: Users,
  banking: Building,
  tax: Calculator
};

export default function ServiceGuidePage() {
  const { t } = useLanguage();
  const [service, setService] = useState(null);
  const [loading, setLoading] = useState(true);
  const location = useLocation();

  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const serviceId = params.get('id');
    if (serviceId) {
      loadService(serviceId);
    }
  }, [location.search]);

  const loadService = async (id) => {
    setLoading(true);
    try {
      const data = await Service.get(id);
      setService(data);
    } catch (error) {
      console.error("Error loading service:", error);
    }
    setLoading(false);
  };

  if (loading) {
    return (
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="animate-pulse space-y-8">
          <div className="h-8 bg-gray-200 rounded w-1/4"></div>
          <div className="h-12 bg-gray-200 rounded w-3/4"></div>
          <div className="space-y-4">
            <div className="h-24 bg-gray-200 rounded-xl"></div>
            <div className="h-24 bg-gray-200 rounded-xl"></div>
            <div className="h-24 bg-gray-200 rounded-xl"></div>
          </div>
        </div>
      </div>
    );
  }

  if (!service) {
    return (
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 text-center">
        <h2 className="text-2xl font-bold text-gray-700">Service not found</h2>
        <Link to={createPageUrl("Services")}>
          <Button className="mt-4">Back to Services</Button>
        </Link>
      </div>
    );
  }
  
  const CategoryIcon = categoryIcons[service.category] || FileText;

  return (
    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8">
      {/* Breadcrumb and Back Button */}
      <div className="flex items-center justify-between">
        <div className="flex items-center text-sm text-gray-500">
          <Link to={createPageUrl("Home")} className="hover:text-orange-600">{t('navHome')}</Link>
          <ChevronRight className="w-4 h-4 mx-1" />
          <Link to={createPageUrl("Services")} className="hover:text-orange-600">{t('navServices')}</Link>
          <ChevronRight className="w-4 h-4 mx-1" />
          <span className="font-medium text-gray-700">{service.name}</span>
        </div>
        <Link to={createPageUrl("Services")}>
          <Button variant="outline">
            <ArrowLeft className="w-4 h-4 mr-2" />
            {t('backToServices')}
          </Button>
        </Link>
      </div>

      {/* Service Header */}
      <header className="space-y-4">
        <div className="flex items-center gap-4">
            <div className="w-16 h-16 bg-gradient-to-r from-orange-100 to-green-100 rounded-2xl flex items-center justify-center flex-shrink-0">
                <CategoryIcon className="w-8 h-8 text-orange-600" />
            </div>
            <div>
                <Badge className="capitalize mb-2">{service.category}</Badge>
                <h1 className="text-4xl font-bold text-gray-900">{service.name}</h1>
            </div>
        </div>
        <p className="text-xl text-gray-600">{service.description}</p>
      </header>
      
      {/* Metadata and Requirements */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card className="saffron-shadow border-0">
            <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                    <BarChart3 className="w-5 h-5 text-orange-600" />
                    {t('serviceOverview')}
                </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
                <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-600">{t('difficulty')}:</span>
                    <Badge variant="secondary" className="capitalize">{service.difficulty}</Badge>
                </div>
                <div className="flex justify-between items-center">
                    <span className="font-medium text-gray-600">{t('estimatedTime')}:</span>
                    <span className="font-semibold">{service.estimated_time}</span>
                </div>
            </CardContent>
        </Card>
        <Card className="green-shadow border-0">
            <CardHeader>
                <CardTitle className="flex items-center gap-2 text-lg">
                    <CheckCircle className="w-5 h-5 text-green-600" />
                    {t('requirements')}
                </CardTitle>
            </CardHeader>
            <CardContent>
                <ul className="list-disc list-inside space-y-2 text-gray-700">
                    {service.instructions?.[0]?.requirements?.map((req, index) => (
                        <li key={index}>{req}</li>
                    ))}
                </ul>
            </CardContent>
        </Card>
      </div>

      {/* Step-by-Step Guide */}
      <div>
        <h2 className="text-3xl font-bold text-gray-900 mb-6">{t('stepByStepGuide')}</h2>
        <div className="space-y-6 border-l-2 border-orange-200 ml-6">
            {service.instructions?.map((item, index) => (
                <div key={index} className="relative pl-12">
                    <div className="absolute -left-7 top-0 w-12 h-12 bg-orange-500 text-white rounded-full flex items-center justify-center font-bold text-xl border-4 border-white">
                        {item.step}
                    </div>
                    <Card className="saffron-shadow border-0 hover-lift">
                        <CardContent className="p-6">
                            <h3 className="text-xl font-semibold mb-2">{item.title}</h3>
                            <p className="text-gray-600 mb-4">{item.description}</p>
                            {item.url && (
                                <a href={item.url} target="_blank" rel="noopener noreferrer">
                                    <Button variant="outline" className="gap-2">
                                        <ExternalLink className="w-4 h-4" />
                                        {t('goToWebsite')}
                                    </Button>
                                </a>
                            )}
                        </CardContent>
                    </Card>
                </div>
            ))}
        </div>
      </div>

      {/* Official Website Link */}
      <div className="text-center bg-gradient-to-r from-orange-50 to-green-50 p-8 rounded-2xl">
        <h3 className="text-xl font-bold text-gray-900 mb-4">{t('readyToStart')}</h3>
        <p className="text-gray-600 mb-6">{t('readyToStartDesc')}</p>
        <a href={service.official_website} target="_blank" rel="noopener noreferrer">
            <Button size="lg" className="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-8 py-3 rounded-xl hover-lift">
                <ExternalLink className="mr-2 w-5 h-5" />
                {t('visitOfficialWebsite')}
            </Button>
        </a>
        <div className="flex items-center justify-center gap-2 mt-4 text-sm text-green-700">
            <Shield className="w-4 h-4" />
            <span>{t('secureLink')}</span>
        </div>
      </div>
    </div>
  );
}