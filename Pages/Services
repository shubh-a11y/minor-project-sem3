import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { createPageUrl } from "../Components/utils/createPageUrl";
import { Service } from "../Components/utils/serviceApi";
import { 
  Search,
  Filter,
  Clock,
  Star,
  ArrowRight,
  FileText,
  CreditCard,
  GraduationCap,
  Heart,
  Briefcase,
  Users,
  Building,
  Calculator,
  ChevronRight
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useLanguage } from '../components/contexts/LanguageContext';

const categoryIcons = {
  documents: FileText,
  identity: CreditCard,
  education: GraduationCap,
  health: Heart,
  employment: Briefcase,
  welfare: Users,
  banking: Building,
  tax: Calculator
};

const categoryColors = {
  documents: "bg-blue-100 text-blue-700 border-blue-200",
  identity: "bg-orange-100 text-orange-700 border-orange-200",
  education: "bg-green-100 text-green-700 border-green-200",
  health: "bg-red-100 text-red-700 border-red-200",
  employment: "bg-purple-100 text-purple-700 border-purple-200",
  welfare: "bg-pink-100 text-pink-700 border-pink-200",
  banking: "bg-indigo-100 text-indigo-700 border-indigo-200",
  tax: "bg-yellow-100 text-yellow-700 border-yellow-200"
};

export default function ServicesPage() {
  const { t } = useLanguage();
  const [services, setServices] = useState([]);
  const [filteredServices, setFilteredServices] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [selectedDifficulty, setSelectedDifficulty] = useState("all");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadServices();
  }, []);

  useEffect(() => {
    filterServices();
  }, [services, searchTerm, selectedCategory, selectedDifficulty]);

  const loadServices = async () => {
    try {
      const data = await Service.list("-popular", 100);
      setServices(data);
    } catch (error) {
      console.error("Error loading services:", error);
    }
    setLoading(false);
  };

  const filterServices = () => {
    let filtered = services;

    if (searchTerm) {
      filtered = filtered.filter(service =>
        service.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        service.description.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (selectedCategory !== "all") {
      filtered = filtered.filter(service => service.category === selectedCategory);
    }

    if (selectedDifficulty !== "all") {
      filtered = filtered.filter(service => service.difficulty === selectedDifficulty);
    }

    setFilteredServices(filtered);
  };

  const popularServices = services.filter(service => service.popular);
  const categoryStats = Object.keys(categoryIcons).map(category => ({
    name: category,
    count: services.filter(service => service.category === category).length
  }));

  if (loading) {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="animate-pulse space-y-8">
          <div className="h-8 bg-gray-200 rounded w-1/3"></div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {[1, 2, 3, 4, 5, 6].map(i => (
              <div key={i} className="h-48 bg-gray-200 rounded-xl"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8">
      {/* Header */}
      <div className="text-center space-y-4">
        <h1 className="text-4xl font-bold text-gray-900">
          {t('servicesDirectory')}
        </h1>
        <p className="text-xl text-gray-600 max-w-3xl mx-auto">
          {t('servicesSubtitle')}
        </p>
      </div>

      {/* Search and Filters */}
      <div className="bg-white rounded-2xl p-6 saffron-shadow">
        <div className="space-y-4">
          <div className="relative">
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <Input
              placeholder={t('searchPlaceholder')}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-12 h-12 text-lg rounded-xl border-gray-200"
            />
          </div>

          <div className="flex flex-wrap gap-4">
            <div className="flex-1 min-w-48">
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger className="h-12 rounded-xl">
                  <SelectValue placeholder={t('allCategories')} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">{t('allCategories')}</SelectItem>
                  {Object.keys(categoryIcons).map(category => (
                    <SelectItem key={category} value={category}>
                      {category.charAt(0).toUpperCase() + category.slice(1)}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="flex-1 min-w-48">
              <Select value={selectedDifficulty} onValueChange={setSelectedDifficulty}>
                <SelectTrigger className="h-12 rounded-xl">
                  <SelectValue placeholder={t('allDifficultyLevels')} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">{t('allDifficultyLevels')}</SelectItem>
                  <SelectItem value="easy">Easy</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="hard">Hard</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>
      </div>

      <Tabs defaultValue="all" className="w-full">
        <TabsList className="grid w-full grid-cols-2 h-12 bg-gray-100 rounded-xl p-1">
          <TabsTrigger value="all" className="rounded-lg">{t('allServicesTab')} ({filteredServices.length})</TabsTrigger>
          <TabsTrigger value="popular" className="rounded-lg">{t('popularServicesTab')} ({popularServices.length})</TabsTrigger>
        </TabsList>

        <TabsContent value="all" className="mt-8">
          {filteredServices.length === 0 ? (
            <div className="text-center py-16">
              <Search className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-600 mb-2">{t('noServicesFound')}</h3>
              <p className="text-gray-500">{t('noServicesSubtitle')}</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredServices.map((service) => {
                const CategoryIcon = categoryIcons[service.category] || FileText;
                return (
                  <Link 
                    key={service.id} 
                    to={createPageUrl(`ServiceGuide?id=${service.id}`)}
                  >
                    <Card className="hover-lift cursor-pointer border-0 saffron-shadow bg-white/80 backdrop-blur h-full">
                      <CardContent className="p-6 h-full flex flex-col">
                        <div className="flex items-start justify-between mb-4">
                          <div className="w-12 h-12 bg-gradient-to-r from-orange-100 to-green-100 rounded-xl flex items-center justify-center">
                            <CategoryIcon className="w-6 h-6 text-orange-600" />
                          </div>
                          <div className="flex gap-2">
                            {service.popular && (
                              <Badge className="bg-green-100 text-green-700 border-green-200">
                                <Star className="w-3 h-3 mr-1" />
                                Popular
                              </Badge>
                            )}
                            <Badge className={categoryColors[service.category]}>
                              {service.category}
                            </Badge>
                          </div>
                        </div>

                        <div className="flex-1">
                          <h3 className="font-semibold text-gray-900 mb-2 text-lg">
                            {service.name}
                          </h3>
                          <p className="text-gray-600 mb-4 line-clamp-2">
                            {service.description}
                          </p>
                        </div>

                        <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                          <div className="flex items-center gap-4 text-sm text-gray-500">
                            {service.estimated_time && (
                              <div className="flex items-center gap-1">
                                <Clock className="w-4 h-4" />
                                {service.estimated_time}
                              </div>
                            )}
                            {service.difficulty && (
                              <div className={`px-2 py-1 rounded-full text-xs font-medium ${
                                service.difficulty === 'easy' ? 'bg-green-100 text-green-700' :
                                service.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                                'bg-red-100 text-red-700'
                              }`}>
                                {service.difficulty}
                              </div>
                            )}
                          </div>
                          <ChevronRight className="w-5 h-5 text-gray-400" />
                        </div>
                      </CardContent>
                    </Card>
                  </Link>
                );
              })}
            </div>
          )}
        </TabsContent>

        <TabsContent value="popular" className="mt-8">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {popularServices.map((service) => {
              const CategoryIcon = categoryIcons[service.category] || FileText;
              return (
                <Link 
                  key={service.id} 
                  to={createPageUrl(`ServiceGuide?id=${service.id}`)}
                >
                  <Card className="hover-lift cursor-pointer border-0 green-shadow bg-white/80 backdrop-blur">
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between mb-4">
                        <div className="w-12 h-12 bg-gradient-to-r from-orange-100 to-green-100 rounded-xl flex items-center justify-center">
                          <CategoryIcon className="w-6 h-6 text-orange-600" />
                        </div>
                        <Badge className="bg-green-100 text-green-700 border-green-200">
                          <Star className="w-3 h-3 mr-1" />
                          Popular
                        </Badge>
                      </div>
                      
                      <h3 className="font-semibold text-gray-900 mb-2">
                        {service.name}
                      </h3>
                      <p className="text-sm text-gray-600 mb-4">
                        {service.description}
                      </p>
                      
                      <div className="flex items-center justify-between text-xs text-gray-500">
                        {service.estimated_time && (
                          <div className="flex items-center gap-1">
                            <Clock className="w-3 h-3" />
                            {service.estimated_time}
                          </div>
                        )}
                        <ArrowRight className="w-4 h-4" />
                      </div>
                    </CardContent>
                  </Card>
                </Link>
              );
            })}
          </div>
        </TabsContent>
      </Tabs>

      {/* Category Overview */}
      {selectedCategory === "all" && !searchTerm && (
        <div className="bg-gradient-to-r from-orange-50 to-green-50 rounded-2xl p-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6 text-center">
            Browse by Category
          </h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {categoryStats.map(({ name, count }) => {
              const Icon = categoryIcons[name];
              return (
                <div 
                  key={name}
                  className="bg-white rounded-xl p-4 text-center hover-lift cursor-pointer"
                  onClick={() => setSelectedCategory(name)}
                >
                  <Icon className="w-8 h-8 mx-auto mb-2 text-orange-600" />
                  <div className="font-medium text-gray-900 capitalize">{name}</div>
                  <div className="text-sm text-gray-500">{count} services</div>
                </div>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
}